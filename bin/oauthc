#!/usr/bin/env ruby

require 'rubygems'
require 'pp'

#workaround to make it work in dev & production mode, any better solutions here??
begin
  require "#{File.dirname(File.dirname(File.expand_path(__FILE__)))}/lib/oauth_cli"
rescue LoadError
  require "oauth_cli"
end

PROFILE_CFG_FILE = ENV['OAUTHC_CONFIG_FILE'] || File.expand_path('~/.oauthconfig')
PROFILE_TMP_FILE = "#{File.dirname(File.dirname(File.expand_path(__FILE__)))}/profiles.yaml"
COMPLETION_FILE  = "#{File.dirname(File.dirname(File.expand_path(__FILE__)))}/completion"

def show_help
  say <<-help
oauthc version 0.0.7
Usage: oauthc [options] [http_method_verb uri [body]]

Options:
  --help             Display this message
  --profile          Name of preset profile to load, put profiles to a yaml file in ~/.oauthconfig
  --host             Host to connect to
  --consumer_key     Consumer Key
  --consumer_secret  Consumer Secret
  --token            Authentication Token
  --token_secret     Authentication Secret
  --mime_type        Set mime type, default: application/xml
  --content_type     Set content type, default: application/xml

Request params (leave blank for interactive mode)
   http_method_verb  any method of get, post, put or delete
   uri               Uri to request
   body              Body attached to request

Bug reports, suggestions, updates:
http://github.com/rngtng/oauth-cli/issues
help
  exit
end

def show_commands
  say <<-help
Interactive Commands:
    get    uri         Get request for given uri
    post   uri [body]  Post request for given uri, asks for body if not provided
    put    uri [body]  Put request for given uri, asks for body if not provided
    delete uri         Delete request for given uri

    auth               Request authentication token
    help               Display this message
help
end

if ARGV.any? { |arg| %w(-h --help -help help).include?(arg) }
  show_help
end

### Read profiles
OauthCli.load_profiles(PROFILE_CFG_FILE, PROFILE_TMP_FILE)

### parse CLI input
method, uri, body, profile = OauthCli.parse_args(ARGV)

### Create client
@client = OauthCli.new(profile)

if !@client.connected?
  say_message("Welcome to Oauth Commandline Client.", 'YELLOW')

  #give profile selection
  if OauthCli.profiles.keys.any?
    profile = choose do |menu|
      menu.header = "Choose profile to load"
      menu.prompt = ">> "
      menu.choices(*(OauthCli.profiles.keys << 'create new') )
    end
    @client.connect(profile) unless profile == 'create new'
  end

  while !@client.connected?
    say("No profiles setups were found, please create one first.") if OauthCli.profiles.empty?

    profile = template = choose do |menu|
      menu.header = "Choose profile template"
      menu.prompt = ">> "
      menu.choices(*(OauthCli.templates.keys << 'custom') )
    end

    say_message "Creating #{template} profile", 'YELLOW'

    say "Profile '#{profile}' already exists, please choose another name." if OauthCli.profiles[profile]
    profile = ask_prompt "Profile name" if !OauthCli.templates[profile] || OauthCli.profiles[profile]

    OauthCli.add_profile(profile, OauthCli.templates[template] || {})

    if OauthCli.profiles[profile][:reg_url]
      say "\n <%= 'Go to ' + color('#{OauthCli.profiles[profile][:reg_url]}', BOLD, UNDERLINE) + ' to register and retrieve your oauth consumer key and secret' %>\n\n"
      Launchy.open(OauthCli.profiles[profile][:reg_url])
    end

    OauthCli.profiles[profile][:host] ||= ask_prompt "Oauth Host"
    OauthCli.profiles[profile][:auth_url] ||= ask_prompt "Authorization Url"
    OauthCli.profiles[profile][:consumer_key] = ask_prompt "Consumer Key"
    OauthCli.profiles[profile][:consumer_secret] = ask_prompt "Consumer Secret"

    @client.connect(profile)
    OauthCli.save_profiles

    say_message "Profile Setup SUCCESSFUL - saved as: #{profile}", 'GREEN'
    say "Type 'auth' ot authorize profile, type 'help' for more"
  end
end

if method && uri
  @client.request(method, uri, body)
  exit
end

######## START Interactive mode

## following lines are shamelessly stolen from repl ->  http://github.com/defunkt/repl
history_dir = ENV['OAUTHC_HISTORY_DIR'] || "~/"
if File.exists?(hdir = File.expand_path(history_dir))
  if script = ARGV.detect { |a| a !~ /^-/ }
    script = File.basename(script)
    hfile = "#{hdir}/.oauthc_history" #TODO include profile name???
  end
end

if !ENV['__REPL_WRAPPED'] && system("which rlwrap > /dev/null 2> /dev/null")
  ENV['__REPL_WRAPPED'] = '0'

  rlargs = ''  #"-r " <- to remember input, unfortunately, it remember output to
  rlargs << " -f #{COMPLETION_FILE}" if File.exists?(COMPLETION_FILE)
  rlargs << " -H #{hfile}" if hfile

  ARGV << "-p=#{profile}" if profile

  exec "rlwrap #{rlargs} #$0 #{ARGV.join(' ')}"
end



loop do
  begin
    auth = @client.auth? ? "'(authorized)', GREEN)" : "'(unauthorized)', RED)"
    input = ask "<%= color('#{profile}', BOLD) %> <%= color( #{auth} %> >> "
    command, uri, body = input.chomp.split(' ')

    next warn(show_commands) if command =~ /^(help|\?)$/
    next warn("Use Ctrl-D (i.e. EOF) to exit") if command =~ /^(exit|quit)$/

    if command =~ /auth/
      say_message "Starting Authorization", 'YELLOW'
      say "\n"
      say " <%= 'Go to ' + color('#{@client.access_request_url}', BOLD, UNDERLINE) + ' to retrieve token verifier' %>\n\n"
      Launchy.open(@client.access_request_url)
      verifier = ask_prompt "verifier"

      begin
        @access_token = @client.access_token(verifier)
        OauthCli.profiles[profile][:token] = @access_token.token
        OauthCli.profiles[profile][:secret] = @access_token.secret
        OauthCli.save_profiles

        say_message "Authorization SUCCESSFUL and saved to profile: #{profile}", 'GREEN'
        say " token:  #{@access_token.token}"
        say " secret: #{@access_token.secret}"
      rescue => message
        say_message "Authorization FAILED: #{message}", 'RED'
      end
    else
      @client.request(command, uri, body)
    end

    next
  rescue NoMethodError, Interrupt
    #TODO save_config unless profile
    exit
  end

end
