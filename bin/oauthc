#!/usr/bin/env ruby

require 'rubygems'
require 'pp'
begin
  require "#{File.dirname(File.dirname(File.expand_path(__FILE__)))}/lib/oauth_cli"
rescue LoadError
  require "oauth_cli"
end

CFG_FILE = ENV['OAUTHC_CONFIG_FILE'] || File.expand_path('~/.oauthconfig')
#http://api.betterbecool.com/v1/places/1197081

def show_help
  say <<-help
oauthc version 0.0.5
Usage: oauthc [options] [http_method_verb uri [body]]

Options:
  --help             Display this message
  --profile          Name of preset profile to load, put profiles to a .yml file in ~/.oauthconfig
  --host             Host to connect to
  --consumer_key     Consumer Key
  --consumer_secret  Consumer Secret
  --token            Authentication Token
  --token_secret     Authentication Secret
  --mime_type        Set mime type, default: application/xml
  --content_type     Set content type, default: application/xml

Request params (leave blank for interactive mode)
   http_method_verb  any method of get, post, put or delete
   uri               Uri to request
   body              Body attached to request

Bug reports, suggestions, updates:
http://github.com/rngtng/oauth-cli/issues
help
  exit
end

def show_commands
  say <<-help
Interactive Commands:
    get    uri         Get request for given uri
    post   uri [body]  Post request for given uri, asks for body if not provided
    put    uri [body]  Put request for given uri, asks for body if not provided
    delete uri         Delete request for given uri

    auth               Request authentication token
    help               Display this message
help
end

if ARGV.any? { |arg| %w(-h --help -help help).include?(arg) }
  show_help
end

#parse CLI input
method, uri, body, opt, profile = OauthCli.parse_args(ARGV)

@profiles = File.exists?(CFG_FILE) ? YAML.load_file(CFG_FILE) : {}

######## CREATE client
@client = OauthCli.new(opt)

if !@client.connected? && profile
  say " <%= color('#  ERROR: Profile #{profile} not found', RED) %>" unless @client.connect(@profiles[profile])
end

#find default profile
if !@client.connected?
  @profiles.each do |key, values|
    profile = key if values['default']
  end
  @client.connect(@profiles[profile])
end

#give profile selection
if !@client.connected? && @profiles.keys.any?
  profile = choose do |menu|
    menu.prompt = "Select a profile >>"
    menu.choices(*(@profiles.keys << 'create new') )
  end
  @client.connect(@profiles[profile])
end

if profile == 'create new'
  puts "TODO: Create new profile"
end

unless @client.connected?
  color = 'YELLOW'
  say " <%= color('# -------------------------------------------------------------------------', #{color}) %>"
  say " <%= color('# no consumer_key provided, please create a profile or call the oauthc with:', #{color}) %>"
  say " <%= color('# oauthc --host <host> --consumer_key <consumer_key> --consumer_secret <consumer_secret>', #{color}) %>"
  say " <%= color('# -------------------------------------------------------------------------', #{color}) %>"
  #please get a key here: #{options[:host]}/api_consumers"
  exit
end

if method && uri
  @client.request(method, uri, body)
  exit
end

######## START Interactive mode

## following lines are shameless stolen from repl ->  http://http://github.com/defunkt/repl
# completion_dir = ENV['REPL_COMPLETION_DIR'] || "~/.repl"
# if File.exists?(cdir = File.expand_path(completion_dir))
#   script = ARGV.detect { |a| a !~ /^-/ }
#   if script
#     cfile = Dir[cdir + '/' + File.basename(script)].first
#     cfile = nil if cfile && !File.exists?(cfile)
#   end
# end

history_dir = ENV['OAUTHC_HISTORY_DIR'] || "~/"
if File.exists?(hdir = File.expand_path(history_dir))
  if script = ARGV.detect { |a| a !~ /^-/ }
    script = File.basename(script)
    hfile = "#{hdir}/.oauthc_history" #TODO include profile name???
  end
end

if !ENV['__REPL_WRAPPED'] && system("which rlwrap > /dev/null 2> /dev/null")
  ENV['__REPL_WRAPPED'] = '0'

  rlargs = ""
  #rlargs << " -f #{cfile}" if cfile
  rlargs << " -H #{hfile}" if hfile
  
  ARGV << "-p=#{profile}" if profile

  exec "rlwrap #{rlargs} #$0 #{ARGV.join(' ')}"
end


loop do
  print ENV['REPL_PROMPT'] || "#{opt[:name] || profile} >> "

  begin
    command, uri, body = $stdin.gets.chomp.split(' ')

    next warn(show_commands) if command =~ /^(help|\?)$/
    next warn("Use Ctrl-D (i.e. EOF) to exit") if command =~ /^(exit|quit)$/

    @client.request(command, uri, body)
    next
  rescue NoMethodError, Interrupt
    #save_config unless profile
    puts
    exit
  #rescue
  end

end

